<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>NULLPOINTER</title>
    <link href="https://tomnullpointer.github.io/gh-pages/feed.xml" rel="self" />
    <link href="https://tomnullpointer.github.io/gh-pages" />
    <updated>2025-10-06T12:50:34+01:00</updated>
    <author>
        <name>me</name>
    </author>
    <id>https://tomnullpointer.github.io/gh-pages</id>

    <entry>
        <title>Generating City Maps</title>
        <author>
            <name>me</name>
        </author>
        <link href="https://tomnullpointer.github.io/gh-pages/generating-city-maps.html"/>
        <id>https://tomnullpointer.github.io/gh-pages/generating-city-maps.html</id>
        <media:content url="https://tomnullpointer.github.io/gh-pages/media/posts/23/1480563951209439235-FIwE-uDXMAwGfs4-2.jpg" medium="image" />
            <category term="Procedural Generation"/>
            <category term="Explainer"/>
            <category term="Archive"/>

        <updated>2025-10-06T10:50:22+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://tomnullpointer.github.io/gh-pages/media/posts/23/1480563951209439235-FIwE-uDXMAwGfs4-2.jpg" alt="" />
                    This post explains how I coded a city map generator for a&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://tomnullpointer.github.io/gh-pages/media/posts/23/1480563951209439235-FIwE-uDXMAwGfs4-2.jpg" class="type:primaryImage" alt="" /></p>
                <p>This post explains how I coded a city map generator for a project that never made it to full production. Some of the techniques involved are similar to the <a href="https://tomnullpointer.github.io/gh-pages/generating-a-fantasy-map.html">Fantasy Map Generator</a> I worked on. My ambition with this project was to create a city map with sensible zoning, navigation and plot generation for housing etc.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/23/1473996160092225543-FHSu-LLWUAAQxC7-3.jpg" alt="" width="1200" height="687" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1473996160092225543-FHSu-LLWUAAQxC7-3-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1473996160092225543-FHSu-LLWUAAQxC7-3-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1473996160092225543-FHSu-LLWUAAQxC7-3-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1473996160092225543-FHSu-LLWUAAQxC7-3-xl.jpg 1024w"></figure>
<h1>Starting with graphs</h1>
<p>For the basic data structure I tried two different graph formats. One was a warped quad grid, as used in games like Townscaper. There is a good explainer of the process for generating such grids <a href="https://www.boristhebrave.com/docs/sylves/1/articles/tutorials/townscaper.html" target="_blank" rel="noopener noreferrer">here</a><a href="https://www.boristhebrave.com/docs/sylves/1/articles/tutorials/townscaper.html" target="_blank" rel="noopener noreferrer"></a>.</p>
<p>This format as the advantages of every cell being a quad and therefore always having 4 neighbours. This in turn leads to the possibility of generating objects within the cells that can make use of bitmasked tile variation - a method of composing objects out of parts based on connections to their neighbours, you see this frequently in 2d tile based games (<a href="https://code.tutsplus.com/how-to-use-tile-bitmasking-to-auto-tile-your-level-layouts--cms-25673t" target="_blank" rel="noopener noreferrer">here is a good explainer)</a></p>
<p>Obviously knowing that each cell can have 4 walls helps enormously if you want to end up with continuous building structures (see Townscaper!).</p>
<p>The image below shows how I split this warped quad grid into different city districts (biomes). I also assign a margin of cells at the edges to be either ocean or containing mountain in order to give the city edges. One of the biomes is a river which is positioned more deliberately than the other districts (as it has to connect ot the ocean and ideally spans across the majority of the map. </p>
<p>In this variant of the approach I also link cells together to create "blocks" that function a little bit like interconnected apartment complexes etc. This was in preparation for a bitmasked style 3d or sprite based decorating phase.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/23/1661996108413906944-FxCYgCCXwAAbnLX.jpg" alt="" width="1020" height="852" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1661996108413906944-FxCYgCCXwAAbnLX-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1661996108413906944-FxCYgCCXwAAbnLX-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1661996108413906944-FxCYgCCXwAAbnLX-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1661996108413906944-FxCYgCCXwAAbnLX-xl.jpg 1024w"></figure>
<h1>Pathing</h1>
<p>In a similar approach to my Fantasy Map Generator, i place a loose grid of Key Road destinations and then connect those with a A* pathfinding algorithm (removing some and shuffling the route with a few random penalties) The roads follow cell edges and are naturally perturbed even if the underlying structure has no inbuilt penalties. I did however add a light amount of 2d noise to the nodes in order to make the roads a bit more variable.</p>
<p>It is at this point that I became dissatisfied with the townscaper map approach. My cells could end arranged with very acute edges (see the bottom left roads for an example). Since my roads path along the edges of cells the generator would end up making these zigzag patterns that I didn't like. The other limitation is that all the cells remain roughly the same size, so all the basic house plots are similar sized. </p>
<p>These limitations can be overcome with more work on relaxing the grid and merging cells, but I decided to try my old favourite alternative. The Voronoi Graph.</p>
<h1>Voronoi Approach</h1>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/23/1661991473062248448-FxCUSK4WcAAC6nE.png" alt="" width="910" height="752" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1661991473062248448-FxCUSK4WcAAC6nE-xs.png 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1661991473062248448-FxCUSK4WcAAC6nE-sm.png 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1661991473062248448-FxCUSK4WcAAC6nE-md.png 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1661991473062248448-FxCUSK4WcAAC6nE-xl.png 1024w"></figure>
<p>The generation process is broadly similar, except each cell is not restricted to being a quad and the resulting mesh is less grid-like. This leads to more variance in the cell shapes and sizes across the map. Also, by placing the seed voronoi cell points in different configurations I can create different styles of layout; gridded, radial etc.</p>
<p>Roads are calculated in the same way as before, but after pathing is finished I run a function to add margins along every cell edge that bordered a path. In the image above you can see an issue where the end of roads taper, this isn't too hard to fix, I just didn't get around to it!</p>
<h1>Housing</h1>
<p>To create housing plots I take each cell and bisect it a number of times. These divisions are set to split the cells evenly (to avoid making slivers of geometry). I repeat the process several times (based on the initial size of the cell and a lower limit for child areas produced) allowing the creation of subblocks and alleyways in each cell. </p>
<p>After the plots are defined I perform a basic square packing routine to see how many buildings I can fit into the remaining plot. This has an element of randomness included to ensure a nice range of building sizes and any plots that are too narrow are eliminated (drawn in red above)</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/23/1480563951209439235-FIwE-uDXMAwGfs4.jpg" alt="" width="1200" height="624" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1480563951209439235-FIwE-uDXMAwGfs4-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1480563951209439235-FIwE-uDXMAwGfs4-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1480563951209439235-FIwE-uDXMAwGfs4-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/23/responsive/1480563951209439235-FIwE-uDXMAwGfs4-xl.jpg 1024w"></figure>
<p>Once the data structure is complete I render the map placing building sprites and other decorations within the list of plots (aligning them to their plot direction and scaling them to fit). There are a range of rules to select the sprites based on biome/district type, frequency of building type, size of plot and proximity to other cell types etc.</p>
<p>Just for fun I assigned some randomly generated names to the districts and add a bit of relevant typography.</p>
<p>I'd love to return to this prototype some day!</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Generating a Fantasy Map</title>
        <author>
            <name>me</name>
        </author>
        <link href="https://tomnullpointer.github.io/gh-pages/generating-a-fantasy-map.html"/>
        <id>https://tomnullpointer.github.io/gh-pages/generating-a-fantasy-map.html</id>
        <media:content url="https://tomnullpointer.github.io/gh-pages/media/posts/22/1470365535468761092-FGfHYSyWQAcjoWG.jpg" medium="image" />
            <category term="Procedural Generation"/>
            <category term="Explainer"/>

        <updated>2025-10-05T20:09:15+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://tomnullpointer.github.io/gh-pages/media/posts/22/1470365535468761092-FGfHYSyWQAcjoWG.jpg" alt="" />
                    This post presents the various stages of design and coding that I&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://tomnullpointer.github.io/gh-pages/media/posts/22/1470365535468761092-FGfHYSyWQAcjoWG.jpg" class="type:primaryImage" alt="" /></p>
                <p>This post presents the various stages of design and coding that I used for my 2021 Procjam entry <a href="https://tomnullpointer.itch.io/procjam21" target="_blank" rel="noopener noreferrer">https://tomnullpointer.itch.io/procjam21</a></p>
<p>I have always loved the look of d&amp;d/tolkien style fantasy maps. I have always wanted to try generating this sort of pen and paper cartography. And as usual Procjam was a good excuse to spend a bit of time investigating the idea..</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/22/1467141564870934531-FFxSBOfXIAgZcds.jpg" alt="" width="976" height="976" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141564870934531-FFxSBOfXIAgZcds-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141564870934531-FFxSBOfXIAgZcds-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141564870934531-FFxSBOfXIAgZcds-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141564870934531-FFxSBOfXIAgZcds-xl.jpg 1024w"></figure>
<h1>Starting with a Vornoi graph</h1>
<p>As with many of my terrain generation projects I decided to use a voronoi dual graph as the basis of the map.</p>
<figure class="post__image"><img  src="https://tomnullpointer.github.io/gh-pages/media/posts/22/1467141574266171395-FFxTrAOXMAA1zK-.png" alt="" width="328" height="330" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141574266171395-FFxTrAOXMAA1zK--xs.png 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141574266171395-FFxTrAOXMAA1zK--sm.png 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141574266171395-FFxTrAOXMAA1zK--md.png 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141574266171395-FFxTrAOXMAA1zK--xl.png 1024w"></figure><figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/22/1467141584353435650-FFxVPxzXsAY5Kr6.png" alt="" width="332" height="329" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141584353435650-FFxVPxzXsAY5Kr6-xs.png 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141584353435650-FFxVPxzXsAY5Kr6-sm.png 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141584353435650-FFxVPxzXsAY5Kr6-md.png 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467141584353435650-FFxVPxzXsAY5Kr6-xl.png 1024w"></figure>
<p>I generate the graph from a fairly even distribution of initial cells and then mark border cells (red), ocean cells (blue), and terrain cells (green) - based on distance from the edges of the world. Later on i refined this process to result in more organic coast lines.</p>
<p>The code then positions several mountain peaks in the graph (set safely away from the coasts) and uses a simple diffusion loop to spread out the height, resulting in a range of altitude across the terrain.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/22/1467569268355125252-FF3aE31XEAAI0Bg.png" alt="" width="779" height="778" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467569268355125252-FF3aE31XEAAI0Bg-xs.png 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467569268355125252-FF3aE31XEAAI0Bg-sm.png 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467569268355125252-FF3aE31XEAAI0Bg-md.png 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1467569268355125252-FF3aE31XEAAI0Bg-xl.png 1024w"></figure>
<p>The process then flags each cell with a biome tag biome based on a number of factors such as; distance from the ocean, altitude and underlying noise sampling.</p>
<h1>Pathfinding</h1>
<p>After setting up a the assignment of biomes across the map I pick some key cells to serve as destinations for a simulated road system. These are chosen by selecting points on a coarse superimposed grid that guarantees that each destination is always a certain distance from its nearest neighbour Any points that are too close or unreachable are discarded. A simple A* pathfinding system is used to connect the key cells. To ensure a natural flow to the connecting paths, the map is first seeded with traversal penalties. Higher altitude cells have higher penalties and certain biomes (marshes for example) are made harder to cross. In addition to feature specific obstacles, all terrain  cells are treated with a light modifier based on a simple 2d noise array in order to add some randomness to the paths returned. </p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/22/1468282156518629381-FGBgBVDWQAwUAcS.png" alt="" width="763" height="766" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1468282156518629381-FGBgBVDWQAwUAcS-xs.png 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1468282156518629381-FGBgBVDWQAwUAcS-sm.png 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1468282156518629381-FGBgBVDWQAwUAcS-md.png 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1468282156518629381-FGBgBVDWQAwUAcS-xl.png 1024w"></figure>
<p>Once a road network has been found the system deletes a few random points and connections (while ensuring that all destinations still have at least one path connecting them) to make the road network less grid like and encourage the occasional appearance of remote outposts etc.</p>
<p>After the roads are built, a similar system is used to create rivers. In this case the initial points are set to be at the top of the mountain areas close to the peaks used to drive the initial altitude diffusion. The rivers then proceed along cell edges, always trying to path to neighbouring cells with lower altitudes. This creates natural looking streams that end up in the ocean or a landlocked lake.</p>
<p>I use cell edges rather than  centres so that the rivers wont occupy the same space as any roads that might exist in the same locations.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/22/1468282172922601478-FGBg1MUWQA03V13.png" alt="" width="1070" height="1003" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1468282172922601478-FGBg1MUWQA03V13-xs.png 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1468282172922601478-FGBg1MUWQA03V13-sm.png 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1468282172922601478-FGBg1MUWQA03V13-md.png 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1468282172922601478-FGBg1MUWQA03V13-xl.png 1024w"></figure>
<p>I could have continued to refine the data creation for the cells to give the map more expressive range, but as the project was part of a jam I decided to stop with my data structure work and start the visual 'cladding' of the map.</p>
<p>Each cell has a biome type which drives it to pull a sprite from a set defined by that biome. For instance, a cell above a specific height is a mountain and can use any of the 5 possible mountain sprites I had prepared. Again the number of cell types is fairly limited with locations such as hills,  forest, marshes, villages, towns, towers etc.</p>
<p>Finally I added a few parameters for the players to adjust, so that they could explore the range of maps the tool can generate.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/22/1470000731726004227-FGZ92moWQAQdpDH.png" alt="" width="1200" height="891" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1470000731726004227-FGZ92moWQAQdpDH-xs.png 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1470000731726004227-FGZ92moWQAQdpDH-sm.png 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1470000731726004227-FGZ92moWQAQdpDH-md.png 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/22/responsive/1470000731726004227-FGZ92moWQAQdpDH-xl.png 1024w"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Procedurally Generating Books</title>
        <author>
            <name>me</name>
        </author>
        <link href="https://tomnullpointer.github.io/gh-pages/procedurally-generating-books.html"/>
        <id>https://tomnullpointer.github.io/gh-pages/procedurally-generating-books.html</id>
        <media:content url="https://tomnullpointer.github.io/gh-pages/media/posts/20/1732442787457446125-GArfeUqXgAAGnSi-2.png" medium="image" />
            <category term="Procedural Generation"/>
            <category term="Explainer"/>
            <category term="Archive"/>

        <updated>2025-10-05T18:51:33+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1732442787457446125-GArfeUqXgAAGnSi-2.png" alt="" />
                    This is a record of my day to day work on a&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1732442787457446125-GArfeUqXgAAGnSi-2.png" class="type:primaryImage" alt="" /></p>
                <div class="o q">
<div class="dw n dx dy dz ea">
<p id="df04" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">This is a record of my day to day work on a project for the <strong class="aee hp">2023 ProcJam game jam</strong>.</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube.com/embed/-OSQZ_6Sw_o" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<h2 id="b7f5" class="aex aey ys as aez na afa nb ne nf afb ng nj nk afc nl no np afd nq nt nu afe nv ny aff cn" data-selectable-paragraph="">Day 0: preperations!</h2>
<h3 id="ee64" class="afg aey ys as aez ro afh rp ne su afi sv nj rq afj rr rs sy afk sz tb tc afl td tf afm cn" data-selectable-paragraph=""><strong class="bn">Acherons Archives: A PCG arcane bookshop</strong></h3>
<p id="14f5" class="pw-post-body-paragraph aec aed ys aee b aef afn aeh aei aej afo ael aem rq afp aeo aep sy afq aer aes tc afr aeu aev aew lv cn" data-selectable-paragraph="">Inspired by a combination of games, Wilmott's Warehouse, Happy Humbles burger farm, Strange Horticulture etc I want to make a bookshop management prototype. But all the books are procedurally generated.</p>
<p id="a9d9" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">The bookshop gets deliveries of arcane books each evening<br>you have all night to arrange them on the shelves/tables etc.<br>At dawn the shop opens and characters come in requesting books<br>a book has various categories — the more of these you can match the better the pay. Firstly i need to define how the books will be generated, so Im going to define a few sets of parameters for this.</p>
<h3 id="b412" class="afg aey ys as aez ro afh rp ne su afi sv nj rq afj rr rs sy afk sz tb tc afl td tf afm cn" data-selectable-paragraph="">Potential book categories for generation</h3>
<p id="9a6e" class="pw-post-body-paragraph aec aed ys aee b aef afn aeh aei aej afo ael aem rq afp aeo aep sy afq aer aes tc afr aeu aev aew lv cn" data-selectable-paragraph=""><strong class="aee hp">Publication Century:</strong><br>1900s<br>1800s<br>1700s<br>1600s</p>
<p id="6d72" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph=""><strong class="aee hp">Rarity:</strong><br>1,2,3,4,5</p>
<p id="45b0" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph=""><strong class="aee hp">Subjects:</strong> Books generally have 2 subjects<br><em class="afs">Oneiroscopy</em>: dreams : closed eye, cloud, candle on plate<br><em class="afs">Astromancy:</em> stars: stars, planets, constellations<br><em class="afs">Dendromancy:</em> trees : trees/roots/acorns/seeds<br><em class="afs">Pyromancy</em>: fire: fires, flames, embers, ovens<br><em class="afs">Necromancy:</em> dead : bones, skulls, coffins<br><em class="afs">Umbramancy:</em> shadows : shadows, cast by things<br><em class="afs">Lunascopy:</em> moon: different moon shapes<br><em class="afs">Lampadomancy:</em> light: lanterns, bulbs</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0__OPr8Tc8GOhNfv_Y.webp" alt="" width="563" height="789" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0__OPr8Tc8GOhNfv_Y-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0__OPr8Tc8GOhNfv_Y-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0__OPr8Tc8GOhNfv_Y-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0__OPr8Tc8GOhNfv_Y-xl.webp 1024w"></figure>
<p id="ebd9" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">I made a pinterest board for inspiration on how these books could look, But primarily I think they need to be color coded per subject and have a layout that allows for me to place and modify icons/patterns/imagery that also relates to the book subject/age/rarity</p>
<p id="b702" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph=""><a class="bi fg" href="https://www.pinterest.co.uk/tomnullpointer/acheron-archives/" rel="noopener ugc nofollow" target="_blank">https://www.pinterest.co.uk/tomnullpointer/acheron-archives/</a></p>
<p id="f096" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">because the jam is only a week long, and I’m unsure of how much time I might get to focus on it I’m going to simplify the generation a little. Im intending to use pixel graphics and a sort of oldskool psx look for the game. This means I can hopefully produce the required parts with less hassle. I am probably going to do this by taking some icons i already own and processing them in photoshop to fit the required format i will use in the game.</p>
<h2 id="620c" class="aex aey ys as aez na afa nb ne nf afb ng nj nk afc nl no np afd nq nt nu afe nv ny aff cn" data-selectable-paragraph="">Day 1: Setting things up</h2>
<h3 id="a820" class="afg aey ys as aez ro afh rp ne su afi sv nj rq afj rr rs sy afk sz tb tc afl td tf afm cn" data-selectable-paragraph="">Unity setup</h3>
<p id="24bd" class="pw-post-body-paragraph aec aed ys aee b aef afn aeh aei aej afo ael aem rq afp aeo aep sy afq aer aes tc afr aeu aev aew lv cn" data-selectable-paragraph="">So Im going to be using Unity for this prototype, Ive actually been learning Unreal recently, but my familiarity and speed in unity is just too good for me to ignore for a jam. So I'm starting how i usually do, by defining rough data structures that I will need, singletons to manage access to data definition libraries and then I’m going to start making the gameobject prefabs I’ll need to build the 3d objects.</p>
<p id="cb85" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">I tend to make use of enums and scriptable objects A LOT, when defining the parts for my systems, so I'm going to start there too.</p>
<p id="0a43" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Here's the class for defining a single book, its mostly enums.</p>
<blockquote class="afz aga agb">
<p id="771c" class="aec aed afs aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">public class C_BookDefClass<br>{<br>public string m_BookName;<br>public int m_BookRarity;<br>public E_Era m_BookEra;<br>public E_Subject m_BookSubjectA;<br>public E_Subject m_BookSubjectB;<br>public C_Book m_pC_Book;<br>}</p>
</blockquote>
<p id="328a" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">This class will be built and filled by a “generator” script and then it will function as the basis for constructing the actual 3d book.</p>
<p id="3ef5" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Since each book is going to have at least 2 subjects, I decided to make each subject have its own little scriptable object class that lists the associated colours and material that could be used to represent that subject — Ill expand this later, but I know I’ll need something like this for the 3d construction phase.</p>
<blockquote class="afz aga agb">
<p id="1d03" class="aec aed afs aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">public class C_SO_SubjectResource : ScriptableObject<br>{<br>public E_Subject m_Subject;<br>public Material[] m_IconMats;<br>public Color[] m_Colors;<br>}</p>
</blockquote>
<h3 id="c96d" class="afg aey ys as aez ro afh rp ne su afi sv nj rq afj rr rs sy afk sz tb tc afl td tf afm cn" data-selectable-paragraph="">3D Book setup</h3>
<p id="3197" class="pw-post-body-paragraph aec aed ys aee b aef afn aeh aei aej afo ael aem rq afp aeo aep sy afq aer aes tc afr aeu aev aew lv cn" data-selectable-paragraph="">The next thing I did was to try and decide on a 3d format for the books.</p>
<p id="1f0a" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">I know that I want to construct them in a sort of quilting 9-tile mosaic pattern. So i need a regular grid of sorts, and I want to be able to have guaranteed borders and a central divider that could be horizontal or vertical so a 5x5 grid looks like the minimum i can go for</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_Y5fXWMg87NqH55glrk2OkA.webp" alt="" width="467" height="472" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_Y5fXWMg87NqH55glrk2OkA-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_Y5fXWMg87NqH55glrk2OkA-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_Y5fXWMg87NqH55glrk2OkA-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_Y5fXWMg87NqH55glrk2OkA-xl.webp 1024w"></figure>
<p id="afd1" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Obviously this is a square! and the books are going to be rectangular, but I'm anticipating being able to just ratio up the Y axis and just work with each subsquare being a rectangle. Most books have a x to y of 1.5 so I'm going to aim for something like that.</p>
<p id="60c5" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">The nest decision is what pixel res i want to use for the subcells, and the overall book. I need to base the full book on multiples of whatever the smallest dimension I can use for the subsquares (5x subsquares across), and I'm thinking 32x32 per cell, which makes the overall book 160 pixels. If I'm stretching by 1.5 height then 32 becomes 48, which is probably ok for pixel snapped rescaling.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_Eo6Jl1Ni5tyMrk6rQv1yVg.webp" alt="" width="588" height="589" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_Eo6Jl1Ni5tyMrk6rQv1yVg-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_Eo6Jl1Ni5tyMrk6rQv1yVg-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_Eo6Jl1Ni5tyMrk6rQv1yVg-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_Eo6Jl1Ni5tyMrk6rQv1yVg-xl.webp 1024w"></figure>
<p id="7508" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Do i need the same sort of grid for the back of the books? I’m not sure yet, probably not. Books tend to have less elaborate back covers. But I’ll need something!</p>
<p id="f714" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">The actual subtile images I am making by taking icons i already bought from the asset store and then cropping/rescaling and tweaking to fit in a 32x32 format. I'm also going to be using just black and white icons to start with, again to save time, I can always add in gradients/more colours later.</p>
<p id="af50" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">So now I have a potential grid layout for the book cover, I want to focus on 2 elements in the generated design, ICONS and BORDERS. The icons will represent the books subject matter and the borders will frame the icons..</p>
<p id="8882" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">I'm going to focus on the borders first because I think they will be a bit harder to do..</p>
</div>
</div>
<div class="adw">
<div class="o q">
<div class="acu dv acv du acw dt ut agi uu agj dw n">
<div class="afu afv afw afx afy o ef">
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0_e1MBSo3Ll3OWbH12.webp" alt="" width="233" height="418" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_e1MBSo3Ll3OWbH12-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_e1MBSo3Ll3OWbH12-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_e1MBSo3Ll3OWbH12-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_e1MBSo3Ll3OWbH12-xl.webp 1024w"></figure>
</div>
</div>
</div>
</div>
<div class="o q">
<div class="dw n dx dy dz ea">
<h3 id="8e00" class="afg aey ys as aez ro afh rp ne su afi sv nj rq afj rr rs sy afk sz tb tc afl td tf afm cn" data-selectable-paragraph="">First Problems!</h3>
<p id="ba90" class="pw-post-body-paragraph aec aed ys aee b aef afn aeh aei aej afo ael aem rq afp aeo aep sy afq aer aes tc afr aeu aev aew lv cn" data-selectable-paragraph="">Books are non-square, but if I want to be able to rotate the icons I'm using in the subsquares then I want those subsquares to be square! If I just scale the subcells (middle image) then the ration goes a bit off and things look stretched. So I tried to space out the actual anchors of each subcell (right image) which keeps the dimensions of each icon nice, but I get gaps in the borders and they don't meet the edges nicely. I have a few options — I can manually shift the border cells so that they hug the edges, I can make each cell a rectangle, or I can add another 2 rows of square cells in</p>
</div>
</div>
<div class="adw">
<div class="o q">
<div class="acu dv acv du acw dt ut agi uu agj dw n">
<div class="afu afv afw afx afy o ef">
<figure class="post__image"><img  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_J9ZV12MnqmrVVqhv_zM_4Q.webp" alt="" width="216" height="293" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_J9ZV12MnqmrVVqhv_zM_4Q-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_J9ZV12MnqmrVVqhv_zM_4Q-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_J9ZV12MnqmrVVqhv_zM_4Q-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_J9ZV12MnqmrVVqhv_zM_4Q-xl.webp 1024w"></figure><figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_EYgR5aWwgQE1ZD_M-BqBRg.webp" alt="" width="228" height="293" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_EYgR5aWwgQE1ZD_M-BqBRg-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_EYgR5aWwgQE1ZD_M-BqBRg-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_EYgR5aWwgQE1ZD_M-BqBRg-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_EYgR5aWwgQE1ZD_M-BqBRg-xl.webp 1024w"></figure><figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_DmXrCdXB5O9GaoQXYF5x4Q.webp" alt="" width="206" height="293" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_DmXrCdXB5O9GaoQXYF5x4Q-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_DmXrCdXB5O9GaoQXYF5x4Q-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_DmXrCdXB5O9GaoQXYF5x4Q-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_DmXrCdXB5O9GaoQXYF5x4Q-xl.webp 1024w"></figure>
</div>
</div>
</div>
</div>
<div class="o q">
<div class="dw n dx dy dz ea">
<p id="1ec7" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">In the end I'm opting for having 2 separate layers of decoration. One for the borders and another for the icons. This means I can save on some extra quads that would otherwise be taking up room. It also means I can potentially overlay layers.. I think this is a reasonable solution for now. I might add an extra cell into the margins if i feel I'm not getting enough value form the simpler setup</p>
</div>
</div>
<div class="adw">
<div class="o q">
<div class="acu dv acv du acw dt ut agi uu agj dw n">
<div class="afu afv afw afx afy o ef">
<figure class="post__image"><img  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_34cU1ChpRsz1F8rhX8ymIA.webp" alt="" width="202" height="290" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_34cU1ChpRsz1F8rhX8ymIA-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_34cU1ChpRsz1F8rhX8ymIA-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_34cU1ChpRsz1F8rhX8ymIA-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_34cU1ChpRsz1F8rhX8ymIA-xl.webp 1024w"></figure><figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_R5iZQxFcs0x5V2KCpkM0BA.webp" alt="" width="203" height="291" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_R5iZQxFcs0x5V2KCpkM0BA-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_R5iZQxFcs0x5V2KCpkM0BA-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_R5iZQxFcs0x5V2KCpkM0BA-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_R5iZQxFcs0x5V2KCpkM0BA-xl.webp 1024w"></figure>
</div>
</div>
</div>
</div>
<div class="o q">
<div class="dw n dx dy dz ea">
<p id="bc30" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">After some fiddling I've managed to get a basic generator up for the borders and background colours.</p>
<p id="6322" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">A while later I have added a similar generator 9 tile pattern setup for the icon area in the middle of the book. This is a set of reflected and rotated icons, which gives a specific geometric feel. I'm going to try and add some other alternative layout generators to not all the books have this centralised form.</p>
<h2 id="ff42" class="aex aey ys as aez na afa nb ne nf afb ng nj nk afc nl no np afd nq nt nu afe nv ny aff cn" data-selectable-paragraph="">Day 2: Landscape Layouts</h2>
<p id="661a" class="pw-post-body-paragraph aec aed ys aee b aef afn aeh aei aej afo ael aem rq afp aeo aep sy afq aer aes tc afr aeu aev aew lv cn" data-selectable-paragraph="">Ok so I started working on a landscape layout, because I don’t want all the books to have the same symmetrical star-like patterns. I think this layout has to be simpler than the other one, it can handle less variation before it kind of breaks. The key thing here is to find enough icons to make the variations interesting based on the items picked. But I also want the icons to fit with the books subject. I also need the “star” icon layouts to fit with subject matter too. I think this is going to be tricky, just the challenge of finding/editing enough icons. The landscape ones I'm taking from the <em class="afs">Isle Of Lore</em> set I bought from the asset store a year or so ago. Hopefully there's enough in there for me to use for each subject.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_B0sahWVOzqRBPfw2p7f42g.webp" alt="" width="207" height="311" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_B0sahWVOzqRBPfw2p7f42g-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_B0sahWVOzqRBPfw2p7f42g-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_B0sahWVOzqRBPfw2p7f42g-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_B0sahWVOzqRBPfw2p7f42g-xl.webp 1024w"></figure>
<p id="65a8" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">So what subjects have I defined? Lets see them again — Its going to be tricky to find icons to match. Each subject needs to have a distinct colour way and a recognisable set of icons that links to its theme. Its tricky to get things that stand out but don't clash! As usual I will be changing a lot of the specifics on the fly, depending on what looks good and what icons I can pull together.</p>
<p id="16e7" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph=""><em class="afs">Oneiroscopy</em>: dreams : closed eye, cloud, candle on plate — dark purple<br><em class="afs">Astromancy:</em> stars: stars, planets, constellations — Light blue<br><em class="afs">Dendromancy:</em> trees : trees/roots/acorns/seeds — Brown/green<br><em class="afs">Pyromancy</em>: fire: fires, flames, embers, ovens — Orange<br><em class="afs">Necromancy:</em> dead : bones, skulls, coffins — Dark red<br><em class="afs">Umbramancy:</em> shadows : shadows, cast by things — Gray/ Dark blue<br><em class="afs">Lunascopy:</em> moon: different moon shapes — Light grey yellow<br><em class="afs">Lampadomancy:</em> light: lanterns, bulbs — Yellow</p>
<p id="cc81" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Here's a first pass at a landscape set for the pyromancy subject</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1731994938714300458-GAlIMPqW4AEoOD4.jpg" alt="" width="1200" height="720" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1731994938714300458-GAlIMPqW4AEoOD4-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1731994938714300458-GAlIMPqW4AEoOD4-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1731994938714300458-GAlIMPqW4AEoOD4-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1731994938714300458-GAlIMPqW4AEoOD4-xl.jpg 1024w"></figure>
<p id="cd5e" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">And here's the necromancy set mixed with the pyro set</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_lJZzkhgKLy2P4YFCpoz86w.webp" alt="" width="720" height="425" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_lJZzkhgKLy2P4YFCpoz86w-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_lJZzkhgKLy2P4YFCpoz86w-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_lJZzkhgKLy2P4YFCpoz86w-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_lJZzkhgKLy2P4YFCpoz86w-xl.webp 1024w"></figure>
<p id="765d" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">I’m starting to look at the star layout code again now, with a view to linking it to subject themes in the same way I did for the landscape layouts. Here's the WIP of the astromancy set</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_f772NUCgH9p2UvduBXjPDA.webp" alt="" width="720" height="418" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_f772NUCgH9p2UvduBXjPDA-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_f772NUCgH9p2UvduBXjPDA-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_f772NUCgH9p2UvduBXjPDA-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_f772NUCgH9p2UvduBXjPDA-xl.webp 1024w"></figure>
<h2 id="1ba7" class="aex aey ys as aez na afa nb ne nf afb ng nj nk afc nl no np afd nq nt nu afe nv ny aff cn" data-selectable-paragraph="">Ok Day 3</h2>
<p id="9d14" class="pw-post-body-paragraph aec aed ys aee b aef afn aeh aei aej afo ael aem rq afp aeo aep sy afq aer aes tc afr aeu aev aew lv cn" data-selectable-paragraph="">Lets get back to it!</p>
<p id="cee3" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">I spent an hour or so finishing the astromancy star-layout set and making a pyromancy version</p>
</div>
</div>
<div class="adw">
<div class="o q">
<div class="acu dv acv du acw dt ut agi uu agj dw n">
<div class="afu afv afw afx afy o ef">
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0_ttdpxH7Z5QgN90iH.webp" alt="" width="640" height="371" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_ttdpxH7Z5QgN90iH-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_ttdpxH7Z5QgN90iH-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_ttdpxH7Z5QgN90iH-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_ttdpxH7Z5QgN90iH-xl.webp 1024w"></figure>
</div>
</div>
</div>
</div>
<div class="o q">
<div class="dw n dx dy dz ea">
<p id="12e8" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Now I can combine them for books that refer to both subjects.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0_ZR1JXOTKqc0jm3KC.webp" alt="" width="720" height="417" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_ZR1JXOTKqc0jm3KC-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_ZR1JXOTKqc0jm3KC-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_ZR1JXOTKqc0jm3KC-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_ZR1JXOTKqc0jm3KC-xl.webp 1024w"></figure>
<p id="9631" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">I was going to move on to making the book titles but I thought I’d add the remaining 2 colour themes — Dendroscopy &amp; Necroscopy. I still only have 4 of the potential 8 subjects, but I think it will have to do for now. I can always add the others later.</p>
</div>
</div>
<div class="adw">
<div class="o q">
<div class="acu dv acv du acw dt ut agi uu agj dw n">
<div class="afu afv afw afx afy o ef">
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0_5-60mz99PGCGpxsv.webp" alt="" width="640" height="367" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_5-60mz99PGCGpxsv-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_5-60mz99PGCGpxsv-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_5-60mz99PGCGpxsv-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_5-60mz99PGCGpxsv-xl.webp 1024w"></figure>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0_doHuAb2gYmxShN0k.webp" alt="" width="640" height="369" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_doHuAb2gYmxShN0k-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_doHuAb2gYmxShN0k-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_doHuAb2gYmxShN0k-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_doHuAb2gYmxShN0k-xl.webp 1024w"></figure>
</div>
</div>
</div>
</div>
<div class="o q">
<div class="dw n dx dy dz ea">
<p id="ccc7" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">and a mix of these two</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_VxKLuf9cT7-BtYjjTd8uuA.webp" alt="" width="720" height="418" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_VxKLuf9cT7-BtYjjTd8uuA-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_VxKLuf9cT7-BtYjjTd8uuA-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_VxKLuf9cT7-BtYjjTd8uuA-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_VxKLuf9cT7-BtYjjTd8uuA-xl.webp 1024w"></figure>
<h3 id="def4" class="afg aey ys as aez ro afh rp ne su afi sv nj rq afj rr rs sy afk sz tb tc afl td tf afm cn" data-selectable-paragraph="">Title Generation</h3>
<p id="541c" class="pw-post-body-paragraph aec aed ys aee b aef afn aeh aei aej afo ael aem rq afp aeo aep sy afq aer aes tc afr aeu aev aew lv cn" data-selectable-paragraph="">So now I've got the icon generators in a state I’m happy with, I started to work on the title generator. As usual, I thought about going really complex and implementing some proper language stuff. But in the end I've opted for a bunch of word tables, specific to each theme — and then a set of 5 or so different sentence constructors.</p>
<p id="d6ee" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">For example I have</p>
<p id="cc19" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph=""><em class="afs">“The adjective noun &amp; the adjective noun”</em></p>
<p id="41d1" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph=""><em class="afs">“The adjective noun at/of/from the locationpartA LocationPartB”</em></p>
<p id="ba01" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph=""><em class="afs">PersonNameA PersonNameB notes/poems/essays on adjective noun”</em></p>
<p id="3f4b" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">And so on, with a bunch of smaller variants within and some grammar sense included so it will mostly make sense. I need to make word tables for all the themes (4 so far) and then run a lot of generations just to check there's no really bad combinations. Its making some nice evocative phrases already, but its also making some pretty funny ones. I think I will leave these in because they are still believable, even if they are pretty silly.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1732442787457446125-GArfeUqXgAAGnSi.png" alt="" width="618" height="586" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1732442787457446125-GArfeUqXgAAGnSi-xs.png 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1732442787457446125-GArfeUqXgAAGnSi-sm.png 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1732442787457446125-GArfeUqXgAAGnSi-md.png 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1732442787457446125-GArfeUqXgAAGnSi-xl.png 1024w"></figure>
<p id="e7f2" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Tomorrow I really should try and get to the point where the books are actually 3d objects I can spawn in a game world!</p>
<h2 id="31de" class="aex aey ys as aez na afa nb ne nf afb ng nj nk afc nl no np afd nq nt nu afe nv ny aff cn" data-selectable-paragraph="">Day 4</h2>
<p id="d5c2" class="pw-post-body-paragraph aec aed ys aee b aef afn aeh aei aej afo ael aem rq afp aeo aep sy afq aer aes tc afr aeu aev aew lv cn" data-selectable-paragraph="">Today I really wanted to get started with the 3d aspect of the project. But First I felt I needed to fill in the remaining book theme word tables. That meant mainly finding Astromancy and Necromancy adjectives/nouns.</p>
<p id="d5c6" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Here's an example of the sort of material I'm using here</p>
<p id="a6bb" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph=""><strong class="aee hp">Necromancy Nouns</strong></p>
<p id="8a92" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">corpse, cadaver, carcass, remains, body, relic, corpse, skeleton, corpus, deceased dog, carrion bird, dead body, ash pile, reliquiae, relic, shell, remnant, debris, hulk, shrine, dead animal, human remains, dead man, bonepile, zombie,skull, femur, ulna, nameless corpse, empty shell, Urn, Tombstone, Crypt, Charnel Pit, Crematorium, Morgue, Mortuary, Sacrifice, Plague Pit, shambler, wraith, phantom, ghost, ghoul, golem, beat, raven, crow, reaper, coffin, sarcophagus, grave, shroud</p>
<p id="709d" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph=""><strong class="aee hp">Necromancy Adjectives</strong></p>
<p id="7fb1" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">departed, deceased, late, lifeless, perished, fallen, inanimate, demised, lost, insensate, insentient, slain, slaughtered, breathless, inert, killed, murdered, still, cold, exanimate, lamented, unanimated, wasted, asleep, cadaverous, mortified, spiritless, buried, liquidated, silent, doomed, perishing, moribund, mortal, poisoned, near-death, fading, sinking, terminal, ghostly, declining, decaying, failing, foundering, withering, waning, crumbling, atrophying, sinking, declining, gravebound, disintegrating, fey, succumbing, collapsing, fated, passing, half-dead, expiring, dire</p>
<p id="9bbc" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Along with my previous 5+ sentence construction types this gives me a decent range of results. I’d like to improve it later, but its certainly fine for now.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_F9USkjV8F1ApnhnjlWEgFg.webp" alt="" width="720" height="230" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_F9USkjV8F1ApnhnjlWEgFg-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_F9USkjV8F1ApnhnjlWEgFg-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_F9USkjV8F1ApnhnjlWEgFg-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_F9USkjV8F1ApnhnjlWEgFg-xl.webp 1024w"></figure>
<p id="e532" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">So the next step was to make the books properly 3D, I just did a bunch of edits to the model and added some pages and a spine. I'm probably going to add some more info to these later, but again they are ok for now.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_7j3neYdegiYw45aMuNbZrA.webp" alt="" width="472" height="603" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_7j3neYdegiYw45aMuNbZrA-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_7j3neYdegiYw45aMuNbZrA-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_7j3neYdegiYw45aMuNbZrA-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_7j3neYdegiYw45aMuNbZrA-xl.webp 1024w"></figure>
<p id="ad10" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">So now I can generate these things in a 3d space. I spent a few mins mocking up a quick 3d environment to try it out…</p>
<p id="3db9" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">I spent most of the afternoon making the player able to carry, rotate, drop and throw the books. You can also put them on a shelf and it will try to snap the placed item onto the shelf next to its leftmost neighbour. It needs some refinement and I should probably do some different versions for table layouts or similar, but its probably ok for now. Books also have the title on their spine now, and they come is slightly varying sizes.</p>
</div>
</div>
<div class="adw">
<div class="o q">
<div class="acu dv acv du acw dt ut agi uu agj dw n">
<div class="afu afv afw afx afy o ef">
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0_tQE5QQx24ZO9Ec8A.webp" alt="" width="640" height="310" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_tQE5QQx24ZO9Ec8A-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_tQE5QQx24ZO9Ec8A-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_tQE5QQx24ZO9Ec8A-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_tQE5QQx24ZO9Ec8A-xl.webp 1024w"></figure>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0_FmGmMX8c-OqMNklw.webp" alt="" width="640" height="435" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_FmGmMX8c-OqMNklw-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_FmGmMX8c-OqMNklw-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_FmGmMX8c-OqMNklw-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_FmGmMX8c-OqMNklw-xl.webp 1024w"></figure>
</div>
</div>
</div>
</div>
<div class="o q">
<div class="dw n dx dy dz ea">
<h2 id="8393" class="aex aey ys as aez na afa nb ne nf afb ng nj nk afc nl no np afd nq nt nu afe nv ny aff cn" data-selectable-paragraph="">Day 5</h2>
<p id="46bf" class="pw-post-body-paragraph aec aed ys aee b aef afn aeh aei aej afo ael aem rq afp aeo aep sy afq aer aes tc afr aeu aev aew lv cn" data-selectable-paragraph="">So today I spent most of the time laying out the shop, putting shelves in, and creating a sort of delivery portal where the books will arrive. I've put in a mystical grandfather clock which shows the current in-game time. Each time it rolls around to dusk the next batch of books are delivered.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/1_EiZS9GTwHEnJjvkCZA8Orw.webp" alt="" width="720" height="380" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_EiZS9GTwHEnJjvkCZA8Orw-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_EiZS9GTwHEnJjvkCZA8Orw-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_EiZS9GTwHEnJjvkCZA8Orw-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/1_EiZS9GTwHEnJjvkCZA8Orw-xl.webp 1024w"></figure>
<p id="2c1b" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">And when dawn arrives, the shops shutters roll up and customers appear. I haven’t got the customers making any requests yet though.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0_hcYFLFM21w4h5VRF.webp" alt="" width="720" height="379" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_hcYFLFM21w4h5VRF-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_hcYFLFM21w4h5VRF-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_hcYFLFM21w4h5VRF-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_hcYFLFM21w4h5VRF-xl.webp 1024w"></figure>
<p id="73ed" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Of course I was advised that as this is a magic bookshop it needs a cat sitting by a roaring fire, so I wasted an hour or so making this..</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0_GUKviAdQaOwbgf0Q.webp" alt="" width="720" height="421" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_GUKviAdQaOwbgf0Q-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_GUKviAdQaOwbgf0Q-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_GUKviAdQaOwbgf0Q-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_GUKviAdQaOwbgf0Q-xl.webp 1024w"></figure>
<p id="38b3" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">Finally, I decided to stress test the generator, and although it had no problem creating 1700 books , when they are all piled up in one place the game framerate crawls to like 15fps. I don't think you'd ever have this many books and when they are actually shelved the FPS is a lot smoother. I suppose I could put a cap on deliveries once you hit a maximum capacity of some sort.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/20/0_kMSK5jM4Xw0aypDQ.webp" alt="" width="720" height="380" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_kMSK5jM4Xw0aypDQ-xs.webp 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_kMSK5jM4Xw0aypDQ-sm.webp 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_kMSK5jM4Xw0aypDQ-md.webp 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/20/responsive/0_kMSK5jM4Xw0aypDQ-xl.webp 1024w"></figure>
<p id="9a1b" class="pw-post-body-paragraph aec aed ys aee b aef aeg aeh aei aej aek ael aem rq aen aeo aep sy aeq aer aes tc aet aeu aev aew lv cn" data-selectable-paragraph="">This is officially the end of my mon-friday sprint on this jam. There's a few days over the weekend before the official end date, but I'm not sure how much work I will put into the prototype before the closing date of next Monday. However I’d really like to finish enough to make it playable, and if its fun I’d like to expand on it at a later date.</p>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Voxel Landscapes</title>
        <author>
            <name>me</name>
        </author>
        <link href="https://tomnullpointer.github.io/gh-pages/voxel-landscapes.html"/>
        <id>https://tomnullpointer.github.io/gh-pages/voxel-landscapes.html</id>
        <media:content url="https://tomnullpointer.github.io/gh-pages/media/posts/19/838510837706915840-C6L9JEYWMAEB8xO-2.jpg" medium="image" />
            <category term="Procedural Generation"/>
            <category term="IsoSurfaces"/>

        <updated>2025-10-05T12:31:43+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://tomnullpointer.github.io/gh-pages/media/posts/19/838510837706915840-C6L9JEYWMAEB8xO-2.jpg" alt="" />
                    I ahve always been interested in different methods of terrain generation, from&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://tomnullpointer.github.io/gh-pages/media/posts/19/838510837706915840-C6L9JEYWMAEB8xO-2.jpg" class="type:primaryImage" alt="" /></p>
                <p>I ahve always been interested in different methods of terrain generation, from Geo-mipmaps to Cubspheres etc. One of the format I have worked the most with is probably noise-generated isosurfaces, wrapped with either a marching cubes algorithmn or an equivalent (Dual countouring, tetra etc)</p>
<p>I have used different variations of isosurface generation in projects such as Permutation Racer, Procedural Planets and even a gpu shader version.</p>
<p>Below is a short video of realtime generation via the graphics card and a small gallery of images from different iterations of my Terrain generation work.</p>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube.com/embed/fh_xKB75LBU" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="3">
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/560198844714319873-B8Y53aoCAAAASS8.jpg" data-size="1200x659"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/560198844714319873-B8Y53aoCAAAASS8-thumbnail.jpg" alt="" width="768" height="422"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/560200604916924419-B8Y7etdCcAAeB6L.jpg" data-size="1200x645"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/560200604916924419-B8Y7etdCcAAeB6L-thumbnail.jpg" alt="" width="768" height="413"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/563845811214495746-B9MuwobCYAEejDn.jpg" data-size="1200x649"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/563845811214495746-B9MuwobCYAEejDn-thumbnail.jpg" alt="" width="768" height="415"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/574587423247712257-B_lYNnCUIAAtHz0.jpg" data-size="1200x681"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/574587423247712257-B_lYNnCUIAAtHz0-thumbnail.jpg" alt="" width="768" height="436"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/654032724219568128-CROXI4bWgAAtYxi.jpg" data-size="1200x726"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/654032724219568128-CROXI4bWgAAtYxi-thumbnail.jpg" alt="" width="768" height="465"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/768556592631582720-Cqp2HmsWcAIbiqC.jpg" data-size="1200x726"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/768556592631582720-Cqp2HmsWcAIbiqC-thumbnail.jpg" alt="" width="768" height="465"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/768566940910678016-Cqp_h2IWIAIx2cj.jpg" data-size="1200x737"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/768566940910678016-Cqp_h2IWIAIx2cj-thumbnail.jpg" alt="" width="768" height="472"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/769652011985952768-Cq5aZ1xXgAAUuCd.jpg" data-size="1200x698"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/769652011985952768-Cq5aZ1xXgAAUuCd-thumbnail.jpg" alt="" width="768" height="447"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/773274066941861889-Crs4pmXWEAEjQWC.jpg" data-size="1200x702"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/773274066941861889-Crs4pmXWEAEjQWC-thumbnail.jpg" alt="" width="768" height="449"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/775100139295965184-CsG1dMPWgAA0vws.jpg" data-size="1200x633"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/775100139295965184-CsG1dMPWgAA0vws-thumbnail.jpg" alt="" width="768" height="405"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/775100258820952064-CsG1j-ZWcAAQB5p.jpg" data-size="1200x714"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/775100258820952064-CsG1j-ZWcAAQB5p-thumbnail.jpg" alt="" width="768" height="457"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/838510837706915840-C6L9JEYWMAEB8xO.jpg" data-size="1200x714"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/838510837706915840-C6L9JEYWMAEB8xO-thumbnail.jpg" alt="" width="768" height="457"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/855756660941492224-C-BCFNLWsAApxIe.jpg" data-size="1200x726"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/855756660941492224-C-BCFNLWsAApxIe-thumbnail.jpg" alt="" width="768" height="465"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/891366238617817088-DF7E1GUXoAAoxYI.jpg" data-size="1200x686"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/891366238617817088-DF7E1GUXoAAoxYI-thumbnail.jpg" alt="" width="768" height="439"></a></figure>
<figure class="gallery__item"><a href="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/891406490237620224-DF7pVqHWAAAIaH2.jpg" data-size="1200x678"><img loading="lazy" src="https://tomnullpointer.github.io/gh-pages/media/posts/19/gallery/891406490237620224-DF7pVqHWAAAIaH2-thumbnail.jpg" alt="" width="768" height="434"></a></figure>
</div></div>
<figure class="post__video"><iframe loading="lazy" width="560" height="314" src="https://www.youtube.com/embed/qL0fcixT4z0" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></figure>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Procedural Planetoids</title>
        <author>
            <name>me</name>
        </author>
        <link href="https://tomnullpointer.github.io/gh-pages/procedural-planetoids.html"/>
        <id>https://tomnullpointer.github.io/gh-pages/procedural-planetoids.html</id>
        <media:content url="https://tomnullpointer.github.io/gh-pages/media/posts/18/795773316317511680-CwsnlHAXAAAV6Ul.jpg" medium="image" />
            <category term="Procedural Generation"/>
            <category term="IsoSurfaces"/>

        <updated>2025-10-05T11:42:17+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://tomnullpointer.github.io/gh-pages/media/posts/18/795773316317511680-CwsnlHAXAAAV6Ul.jpg" alt="" />
                    Procedural Planetoids is a project I made for Procjam, a GameJam focused on&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://tomnullpointer.github.io/gh-pages/media/posts/18/795773316317511680-CwsnlHAXAAAV6Ul.jpg" class="type:primaryImage" alt="" /></p>
                <figure class="post__image"><img  src="https://tomnullpointer.github.io/gh-pages/media/posts/18/797447640019517440-CxEaX8QXEAA_c8d.jpg" alt="" width="304" height="252" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797447640019517440-CxEaX8QXEAA_c8d-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797447640019517440-CxEaX8QXEAA_c8d-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797447640019517440-CxEaX8QXEAA_c8d-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797447640019517440-CxEaX8QXEAA_c8d-xl.jpg 1024w"></figure><figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/18/797448202689642497-CxEa54zXcAE8A88-2.jpg" alt="" width="305" height="253" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797448202689642497-CxEa54zXcAE8A88-2-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797448202689642497-CxEa54zXcAE8A88-2-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797448202689642497-CxEa54zXcAE8A88-2-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797448202689642497-CxEa54zXcAE8A88-2-xl.jpg 1024w"></figure>
<p>Procedural Planetoids is a project I made for <a href="https://itch.io/jam/procjam" rel="noopener" target="_blank">Procjam</a>, a GameJam focused on procedural generation. Its simple tool that generates voxel based planets, with a few parameters exposed to the user via sliders. </p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/18/FxuVE6.jpg" alt="" width="2048" height="1152" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/FxuVE6-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/FxuVE6-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/FxuVE6-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/FxuVE6-xl.jpg 1024w"></figure>
<p>I used a marching cubes algorithm to ‘skin’ an isosurface for the planet based on values from a noise array. The noise array is populated and ‘carved’ via a series of functions that are linked to the UI parameters, so you can make you plant more fragmented, smoother, or spikier etc. The final form is then textured with a spherical styled triplanar shader i wrote.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/18/797446880481382400-CxEZsI3WQAA4UPe.jpg" alt="" width="1175" height="974" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797446880481382400-CxEZsI3WQAA4UPe-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797446880481382400-CxEZsI3WQAA4UPe-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797446880481382400-CxEZsI3WQAA4UPe-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/18/responsive/797446880481382400-CxEZsI3WQAA4UPe-xl.jpg 1024w"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Proc Gen Coral Reef</title>
        <author>
            <name>me</name>
        </author>
        <link href="https://tomnullpointer.github.io/gh-pages/proc-gen-coral-reef.html"/>
        <id>https://tomnullpointer.github.io/gh-pages/proc-gen-coral-reef.html</id>
        <media:content url="https://tomnullpointer.github.io/gh-pages/media/posts/17/ezgif-5-be5672580e82-3.gif" medium="image" />
            <category term="Procedural Generation"/>

        <updated>2025-10-05T11:25:30+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://tomnullpointer.github.io/gh-pages/media/posts/17/ezgif-5-be5672580e82-3.gif" alt="" />
                    This project was an attempt to generate an entire 3D environment procedurally&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://tomnullpointer.github.io/gh-pages/media/posts/17/ezgif-5-be5672580e82-3.gif" class="type:primaryImage" alt="" /></p>
                <p> </p>
<figure class="post__image"><img  src="https://tomnullpointer.github.io/gh-pages/media/posts/17/ezgif-6b8b9332878fca.gif" alt="" width="327" height="327"></figure><figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/17/ezgif-66bcfe3dba7c23-3.gif" alt="" width="328" height="328"></figure>
<p>This project was an attempt to generate an entire 3D environment procedurally (down to mesh level).</p>
<p>The coral reef in these images consists of generated, terrain, fish, jellyfish, coral plants and visual effects, all of which are built on the fly by code.</p>
<p>Each coral plant is constructed from a virtual skeleton via a custom node system (similar to L-Systems but my own design). </p>
<figure class="post__image"><img  src="https://tomnullpointer.github.io/gh-pages/media/posts/17/ezgif-5-be5672580e82-2.gif" alt="" width="320" height="320"></figure><figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/17/ezgif-5-fe0e29aa526a-2.gif" alt="" width="320" height="320"></figure>
<p>These skeletons are then clad with procedurally generated meshes and mapped with generated palette colours.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/17/1132283914490392576-D7auNYjXkAAonGe.jpg" alt="" width="1102" height="786" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/17/responsive/1132283914490392576-D7auNYjXkAAonGe-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/17/responsive/1132283914490392576-D7auNYjXkAAonGe-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/17/responsive/1132283914490392576-D7auNYjXkAAonGe-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/17/responsive/1132283914490392576-D7auNYjXkAAonGe-xl.jpg 1024w"></figure>
<p>The fish &amp; jellyfish are also generated in real-time from code-constructed meshes. Their movement across the reef is directed by boid flocking algorithms and the mesh animations are driven by a suit of  vertex shaders I wrote specifically for the purpose.</p>
<figure class="post__image"><img  src="https://tomnullpointer.github.io/gh-pages/media/posts/17/ezgif-6c41583c53f122-2.gif" alt="" width="293" height="219"></figure><figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/17/ezgif-6ed9906eeca2b7.gif" alt="" width="349" height="218"></figure>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/17/976875237118742529-DY6O1rsW0AMyB71-2.jpg" alt="" width="1200" height="1200" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/17/responsive/976875237118742529-DY6O1rsW0AMyB71-2-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/17/responsive/976875237118742529-DY6O1rsW0AMyB71-2-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/17/responsive/976875237118742529-DY6O1rsW0AMyB71-2-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/17/responsive/976875237118742529-DY6O1rsW0AMyB71-2-xl.jpg 1024w"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Generating procedural Insects with IK</title>
        <author>
            <name>me</name>
        </author>
        <link href="https://tomnullpointer.github.io/gh-pages/generating-procedural-insects-with-ik.html"/>
        <id>https://tomnullpointer.github.io/gh-pages/generating-procedural-insects-with-ik.html</id>
        <media:content url="https://tomnullpointer.github.io/gh-pages/media/posts/16/1109928671727501312-D2dCOU0WoAYCyVa-2.png" medium="image" />
            <category term="Procedural Generation"/>

        <updated>2025-10-05T11:20:19+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://tomnullpointer.github.io/gh-pages/media/posts/16/1109928671727501312-D2dCOU0WoAYCyVa-2.png" alt="" />
                    This project was an experiment in generating insect models from procedural meshes&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://tomnullpointer.github.io/gh-pages/media/posts/16/1109928671727501312-D2dCOU0WoAYCyVa-2.png" class="type:primaryImage" alt="" /></p>
                <figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/16/ezgif-5-d0776e5c1743.gif" alt="" width="504" height="252"></figure>
<p>This project was an experiment in generating insect models from procedural meshes while using IK Physics to allow the resulting structures to have procedurally animated walks.</p>
<p>The body parts (leg parts, wings, antennae etc) of each insect are generated according to a variable ruleset which determines the orientation, scaling and connectivity limits. The insect is then assembled from meshes which are themselves procedurally generated with a series of 3d modifiers (warps, twists, tapers etc).</p>
<p>Finally the meshes are tinted with a vertex colour palette that uses local triplanar space to blend between gradients.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/16/2insects.jpg" alt="" width="1479" height="705" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/16/responsive/2insects-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/16/responsive/2insects-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/16/responsive/2insects-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/16/responsive/2insects-xl.jpg 1024w"></figure>
<p>The elements of the skeleton are dynamically bound to a generated IK rig which runs various motors in order to procedurally animate the insects walk.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/16/ezgif-5-94f2774302ca.gif" alt="" width="504" height="252"></figure>
<p>The system is capable of generating a wide range of insects that both look unique and have varying movement styles</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/16/1132287297876123649-D7axQUMWwAA55MW-2.jpg" alt="" width="1200" height="1200" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/16/responsive/1132287297876123649-D7axQUMWwAA55MW-2-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/16/responsive/1132287297876123649-D7axQUMWwAA55MW-2-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/16/responsive/1132287297876123649-D7axQUMWwAA55MW-2-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/16/responsive/1132287297876123649-D7axQUMWwAA55MW-2-xl.jpg 1024w"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>C.V. Bio</title>
        <author>
            <name>me</name>
        </author>
        <link href="https://tomnullpointer.github.io/gh-pages/cv-bio.html"/>
        <id>https://tomnullpointer.github.io/gh-pages/cv-bio.html</id>
        <media:content url="https://tomnullpointer.github.io/gh-pages/media/posts/15/Bio-data-format-2-724x1024-3615278986.jpg" medium="image" />
            <category term="About"/>

        <updated>2025-10-04T21:40:47+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://tomnullpointer.github.io/gh-pages/media/posts/15/Bio-data-format-2-724x1024-3615278986.jpg" alt="" />
                    Employment Nullpointer Ltd [Brighton] 2000 – present Director Responsible for the development&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://tomnullpointer.github.io/gh-pages/media/posts/15/Bio-data-format-2-724x1024-3615278986.jpg" class="type:primaryImage" alt="" /></p>
                <h2>Employment</h2>
<p><strong>Nullpointer Ltd </strong>[Brighton] 2000 – present<br><em>Director</em><br>Responsible for the development and direction of a creative digital<br>studio that has exhibited internationally, produced multiple game titles<br>and worked for clients such as Tate, the V&amp;A and The Southbank Centre.</p>
<p><br><strong>Big Robot Ltd  </strong>[Brighton/Bristol] 2011 – 2020<br><em>Lead Programmer</em><br>Responsible for directing and implementing code/design for four<br>commercial games.</p>
<p><strong>Hudderfield University</strong> [Huddersfield] 2010 – 2015<br><em>Lecturer</em><br>Responsible for: BA/BSC Digital Culture module, Foundation games<br>programming modules, MA digital design tutor, BA<br>Animation/VR/Digital design tutor.</p>
<h2>Education</h2>
<p><strong>Hudderfield University</strong> [Huddersfield] 2010 – 2015<br><em>Phd </em><br>“An investigation of the digital sublime in videogames”<br>Practice based Phd involving software development and thesis.</p>
<p><strong>Goldsmiths College</strong> [London] 1992 – 1995<br>BA Art History and Studio Practice.</p>
<h2>Experience</h2>
<p>I have over 25 years of design and programming experience, producing client driven projects, teaching game design at University level and creating cutting edge game-projects for Phd research. I work mainly in Unity, but I also have experience of working with c++, openframeworks, developing for IOS &amp; Android platforms, Xbox consoles and Nintendo Switch.</p>
<p>I have worked on many aspects of design and programming including; AI, UI, UX, level design, VFX, sound design, game mechanics, physics, animation, shaders. I often work as a solo developer, but I am also used to working in teams, directing art/sound/animation, defining additional programming, managing production, workflow, testing, releases and repositories.</p>
<p>I have run my own Limited Company for over a decade and have created seven commercial games, working with publishers and other partners. I have also produced work for museums and galleries like the Tate, Southbank, Design Museum and V&amp;A.</p>
<p>I have given presentations about creative coding and game design at various international venues including GDC (San Francisco), Indievelopment (Amsterdam), Rezzed (UK). I have a Phd in philosophy &amp; game design and have a specific interest in procedural generation and generative art.</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Game Jams and Freebies</title>
        <author>
            <name>me</name>
        </author>
        <link href="https://tomnullpointer.github.io/gh-pages/game-jams-and-freebies.html"/>
        <id>https://tomnullpointer.github.io/gh-pages/game-jams-and-freebies.html</id>
        <media:content url="https://tomnullpointer.github.io/gh-pages/media/posts/14/2025-10-04-22_31_47-Publii-md.png" medium="image" />
            <category term="Procedural Generation"/>
            <category term="Game Development"/>

        <updated>2025-10-04T21:37:42+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://tomnullpointer.github.io/gh-pages/media/posts/14/2025-10-04-22_31_47-Publii-md.png" alt="" />
                    This is a short list of some of the side projects and&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://tomnullpointer.github.io/gh-pages/media/posts/14/2025-10-04-22_31_47-Publii-md.png" class="type:primaryImage" alt="" /></p>
                <figure>This is a short list of some of the side projects and game jam contributions I have produced over the years. A full list is available on my <a href="https://tomnullpointer.itch.io/" target="_blank" rel="noopener noreferrer">itch.io page</a>.</figure>
<h2><a href="https://tomnullpointer.itch.io/jeliens" target="_blank" rel="noopener noreferrer">Jeliens</a><br><figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/14/2025-10-04-22_31_47-Publii.png" alt="" width="721" height="445" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/14/responsive/2025-10-04-22_31_47-Publii-xs.png 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/14/responsive/2025-10-04-22_31_47-Publii-sm.png 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/14/responsive/2025-10-04-22_31_47-Publii-md.png 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/14/responsive/2025-10-04-22_31_47-Publii-xl.png 1024w"></figure></h2>
<p>A Jellyfish generator developed for ProcJam2019. It uses realtime mesh generation and shader based animations to create a range of alien jellyfish (Web Player)</p>
<h2><a href="https://tomnullpointer.itch.io/procjam21" target="_blank" rel="noopener noreferrer">Fantasy Map Generator</a></h2>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/14/2025-10-04-22_25_23-Settings.png" alt="" width="1102" height="852" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/14/responsive/2025-10-04-22_25_23-Settings-xs.png 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/14/responsive/2025-10-04-22_25_23-Settings-sm.png 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/14/responsive/2025-10-04-22_25_23-Settings-md.png 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/14/responsive/2025-10-04-22_25_23-Settings-xl.png 1024w"></figure>
<figure>A map generator developed for ProcJam2021, intended to create maps in the style of old fantasy books. It uses a combination of Vornoi cell generation, pathfinding and biome logic to define a Tolkein-esque landscape. The user can adjust various parameters to explore the possibility space of the model. (Web Player)</figure>
<h2><a href="https://tomnullpointer.itch.io/permutation-racer" rel="noopener" target="_blank">Permutation Racer</a><div class="post__iframe"><iframe loading="lazy" width="560" height="314" src="https://www.youtube.com/embed/nvVdMr6ox9A" allowfullscreen="allowfullscreen" data-mce-fragment="1"></iframe></div><a href="https://tomnullpointer.itch.io/permutation-racer" rel="noopener" target="_blank"></a></h2>
<figure></figure>
<p>Permutation Racer’ is an experimental, endless racing game, exploring the procedural construction of space.</p>
<p>It’s part of my PHD research to investigate ideas that connect games, permutation and the sublime. The race track is generated from a series of noise filtered ‘biome’ styling functions. There are about 12 region types ranging from chasms to archways and caves, all generated in real time as the player progresses. I might post a more technical article about the actual methods used later. The only aim is to travel as far as possible, hampered by the fact that over time/distance the generation algorithms make the track more hazardous and convoluted.</p>
<h2><a href="https://tomnullpointer.itch.io/in-ruins" rel="noopener" target="_blank">In Ruins</a></h2>
<p><img loading="lazy" src="https://img.itch.zone/aW1hZ2UvNDk1NDQvMjE3MDA0LmpwZw==/original/mGvqB%2F.jpg" alt="screenshot" width="100%" data-is-external-image="true"></p>
<p>‘In Ruins’ is an experimental, ambient game examining the procedural construction of space. It’s part of an ongoing Phd research project to investigate ideas that connect games, permutation and the sublime. It’s part of a series of games inspired by artistic interpretations of the sublime, in this case the work of Romantic landscape painters (Thomas Cole, Caspar David Friedrich etc). Its also heavily influenced by Fumito Uedas Ico series.</p>
<p>The player is deposited on the edge of a procedurally generated island. The island consists of overgrown pathways ruined spires and broken ramparts. A central tower looms above the island beckoning the player towards it.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Coding a generative music game – AvSeq</title>
        <author>
            <name>me</name>
        </author>
        <link href="https://tomnullpointer.github.io/gh-pages/coding-a-generative-music-game-avseq.html"/>
        <id>https://tomnullpointer.github.io/gh-pages/coding-a-generative-music-game-avseq.html</id>
        <media:content url="https://tomnullpointer.github.io/gh-pages/media/posts/13/ss_907cc5a3b4478e531440c45cb9d84e1485734d43.1920x1080.jpg" medium="image" />
            <category term="Procedural Generation"/>
            <category term="Game Development"/>
            <category term="Explainer"/>
            <category term="Archive"/>

        <updated>2025-10-04T19:18:54+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://tomnullpointer.github.io/gh-pages/media/posts/13/ss_907cc5a3b4478e531440c45cb9d84e1485734d43.1920x1080.jpg" alt="" />
                    This post outlines some of the technical issues and solutions connected with&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://tomnullpointer.github.io/gh-pages/media/posts/13/ss_907cc5a3b4478e531440c45cb9d84e1485734d43.1920x1080.jpg" class="type:primaryImage" alt="" /></p>
                <figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/13/ResHubAvseq1.jpg" alt="" width="910" height="400" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq1-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq1-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq1-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq1-xl.jpg 1024w"></figure>
<p><br><br></p>
<div class="entry-content">
<article>
<p>This post outlines some of the technical issues and solutions connected with the development of AvSeq, the first game produced for my PhD research. More generalised information about the game is available <a href="http://www.nullpointer.co.uk/content/avseq-3/">here</a></p>
<h2>Accurate high frequency audio timing and quantization in Unity</h2>
<p>During the development of AvSeq I needed to find a way to get a high accuracy audiotimer to trigger audiovisual events in perfect synchronization. Unity is primarily a games engine and had not built-in functionality to support this type of requirement. In libraries like portaudio the code provides a callback function that can deliver buffered content to the soundcard, down to the level of a single sample. In Unity the update threads run at a much slower rate and cant be used for reliable timing. Unity also discourages the use of threads and out-of-update callbacks so I had to find another way. The solution I came up with was to leverage the built in functions of the packaged FMOD library. I particular this library provides functions to<br>grab the current playpoint of a sample and also trigger a sample with a specific pre-roll delay.<br>I used these features in the following steps.</p>
<ol>
<li>Setup and play a hardware looping metronome via FMOD. This can be a standard clicktrack sample or even a silent audiofile. The length and playback pitch of the file represents a single audio-beat cycle that can be tracked in code.</li>
<li>Run a FixedUpdate (or any fast thread) and within this request the the current PCM sample position of the metronome.</li>
<li>Use this position to detect if the current loop of the metronome sample is nearing its end. The margin of error for this ‘catching’ process detect depends on the frequency of your update and the pitch/frequency of the metronome.</li>
<li>If the retrieved PCM location is close enough to the next loop point then trigger a new sound to play BUT set the new sample pre-roll to the remaining samples in the current loop (loop sample length- current sample position).</li>
<li>Don’t create or run any further triggers until the retrieved position has looped back over the zero-point.<em><br></em></li>
</ol>
<p>This system allows accuracy up until a relatively high tempo rate (dependent on individual machine speed), and allows the sample accurate triggering and quantizing of triggered audiosources. The tempo of the entire system can be adjusted by varying the playback pitch of the reference metronome, for example a metronome sample of 1 second length, will define a bpm of 60. At double the metronome pitch the bpm will be 120. The ‘catch’ margin can be adjusted dynamically as a percentage of this overall length if you want real-time pitch changes like I use in AvSeq. In AvSeq I also use the looping reference sample to keep track of beats/bars in the total sequence and each new beat trigger the playback of samples assigned to that beat in the sequencer score.</p>
<p>Some example code:</p>
<pre>	void FixedUpdate () {

		m_MS=m_ASMetronome.timeSamples;//get the current position of the looping reference sample
		uint catchup=0;
		float delay=0;

		if(m_MS&lt;m_CatchMargin &amp;&amp; m_HasLooped==1)//check to see if the reference sample has looped and has been dealt with
		{
			m_HasLooped=0;//reset the haslooped indicator
		}

		//catch end of loop
		if(m_MS&gt;m_SampleLength-m_CatchMargin)
		{
			m_MSCatch=m_MS;

			//only do if we havent marked a new loop yet
			if(m_HasLooped==0)
			{
			catchup=(uint)(m_SampleLength-m_MS);	//work out how long to delay the start of any new sample
			m_HasLooped=1;	//register that we have dealt with the current loop
			m_AudioSource.Play(catchup);//play a sample with the correct delay to coincide with the actual loop point
			}
		}
              }
</pre>
<p>There’s a bit more discussion and some extensions of the technique discussed at <a href="http://forum.unity3d.com/threads/audio-stepsequencer-and-they-said-it-couldnt-be-done.78003/">http://forum.unity3d.com/threads/audio-stepsequencer-and-they-said-it-couldnt-be-done.78003/</a> </p>
<h2>Video Feedback effect in Unity</h2>
<p>I wanted AvSeq to feature some form of video feedback, discovered in camera/tv loop experiments of the 1980s. You can see the effect in this video <a href="https://www.youtube.com/watch?v=eD9rr0gTLSU">https://www.youtube.com/watch?v=eD9rr0gTLSU</a> (although its a recent video, the actual technique is the same). To achieve this I mimicked the feedback loop by rendering a subset of the games geometry to an offscreen surface and then drawing that image in the background of the scene. This meant that each frame of gameplay also had a degree of the previous frame set behind the current objects. By altering the transparency of the previous frame image the system can control the amount of feedback and blur that occurs. The scene setup for this process is show below.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/13/ResHubAvseq2.jpg" alt="" width="1448" height="680" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq2-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq2-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq2-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq2-xl.jpg 1024w"></figure>
<ul>
<li>A: Shows the scene from a point close to the player perspective, but with the camera pulled back slightly to show the edges of the background screen. The image shows the foreground cubes and their after-images on the background screen (one cube is even passing through the background screen)</li>
<li><br>B: Shows the positioning of the background screen and the ‘invisible’ offscreen rendering camera. The cubes can easily be seen in front of the screen, within the normal playspace of the game.</li>
<li><br>C: shows the image viewed from the offscreen rendering camera. This image is then drawn onto the background screen during the next frame.</li>
</ul>
<p>Some compensation has to be made to account for offscreen texture surfaces being square and the scene view being landscape, but these are trivial ratio adjustments. In AvSeq I used additive blending on the background screen, in order to control the persistence of each frame and its feedback, but other blending methods can be used to generate more radical effects. Similarly the polygon mesh of the background plane can be warped to force the feedback to flow in a specific direction. Although I avoided extreme warping in the final game version, some of the prototypes demonstrate the effect more clearly.</p>
<figure class="post__image"><img loading="lazy"  src="https://tomnullpointer.github.io/gh-pages/media/posts/13/ResHubAvseq3.jpg" alt="" width="912" height="412" sizes="(min-width: 760px) 660px, calc(93.18vw - 30px)" srcset="https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq3-xs.jpg 320w ,https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq3-sm.jpg 480w ,https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq3-md.jpg 768w ,https://tomnullpointer.github.io/gh-pages/media/posts/13/responsive/ResHubAvseq3-xl.jpg 1024w"></figure>
<p>Obviously the effect is best observed in motion.</p>
<div class="post__iframe"><iframe loading="lazy" width="560" height="314" src="https://www.youtube.com/embed/DvJ1bsjDpz4" allowfullscreen="allowfullscreen"></iframe></div>
<p>The video above shows the feedback working with different levels of persistence, it also shows some additional layering effects that are introduced between the background screen and the camera depending on the progress of the music. It is important to note that the whole process requires a secondary render camera. This is because if the system uses the primary camera for the feedback render then the resulting image will involve feedback of every visible element. By using a secondary camera specifically for the feedback image the game objects can be separated into layer-masks that appear in the feedback layer, the game layer or both.</p>
</article>
</div>
<p> </p>
            ]]>
        </content>
    </entry>
</feed>
